@online{DataScienceINTProjecticum2024,
  title = {{{DataScienceINT}}/Projecticum2024},
  url = {https://github.com/DataScienceINT/projecticum2024/tree/main},
  urldate = {2024-09-28},
  file = {C:\Users\Mijn-PC\Zotero\storage\CG6UXC8A\main.html}
}

@book{doughertyZoteroBetterBibTeX,
  title = {Zotero and {{Better BibTeX}} | {{On The Line}}: {{How Schooling}}, {{Housing}}, and {{Civil Rights Shaped Hartford}} and Its {{Suburbs}}},
  shorttitle = {Zotero and {{Better BibTeX}} | {{On The Line}}},
  author = {Dougherty, Jack and {contributors}, and},
  url = {https://ontheline.trincoll.edu/zotero.html},
  urldate = {2024-11-07},
  abstract = {This open-access digital book makes visible the hidden history of schooling and housing boundaries that divided metropolitan Hartford, Connecticut, and tells the stories of everyday families and civil rights activists who seek to cross over, redraw, or erase these lines.},
  langid = {english},
  file = {C:\Users\Mijn-PC\Zotero\storage\THMJRR7S\zotero.html}
}

@article{kampenTranslatomeAnalysisReveals2019,
  title = {Translatome Analysis Reveals Altered Serine and Glycine Metabolism in {{T-cell}} Acute Lymphoblastic Leukemia Cells},
  author = {Kampen, Kim R. and Fancello, Laura and Girardi, Tiziana and Rinaldi, Gianmarco and Planque, Mélanie and Sulima, Sergey O. and Loayza-Puch, Fabricio and Verbelen, Benno and Vereecke, Stijn and Verbeeck, Jelle and Op De Beeck, Joyce and Royaert, Jonathan and Vermeersch, Pieter and Cassiman, David and Cools, Jan and Agami, Reuven and Fiers, Mark and Fendt, Sarah-Maria and De Keersmaecker, Kim},
  date = {2019-06-11},
  journaltitle = {Nature Communications},
  shortjournal = {Nat Commun},
  volume = {10},
  number = {1},
  pages = {2542},
  issn = {2041-1723},
  doi = {10.1038/s41467-019-10508-2},
  url = {https://www.nature.com/articles/s41467-019-10508-2},
  urldate = {2024-09-28},
  abstract = {Abstract                            Somatic ribosomal protein mutations have recently been described in cancer, yet their impact on cellular transcription and translation remains poorly understood. Here, we integrate mRNA sequencing, ribosome footprinting, polysomal RNA sequencing and mass spectrometry datasets from a mouse lymphoid cell model to characterize the T-cell acute lymphoblastic leukemia (T-ALL) associated ribosomal               RPL10 R98S               mutation. Surprisingly, RPL10 R98S induces changes in protein levels primarily through transcriptional rather than translation efficiency changes. Phosphoserine phosphatase (               PSPH               ), encoding a key serine biosynthesis enzyme, was the only gene with elevated transcription and translation leading to protein overexpression. PSPH upregulation is a general phenomenon in T-ALL patient samples, associated with elevated serine and glycine levels in xenograft mice. Reduction of PSPH expression suppresses proliferation of T-ALL cell lines and their capacity to expand in mice. We identify ribosomal mutation driven induction of serine biosynthesis and provide evidence supporting dependence of T-ALL cells on PSPH.},
  langid = {english},
  file = {C:\Users\Mijn-PC\Zotero\storage\RX4A7MVZ\Kampen et al. - 2019 - Translatome analysis reveals altered serine and gl.pdf}
}

@article{loveModeratedEstimationFold2014,
  title = {Moderated Estimation of Fold Change and Dispersion for {{RNA-seq}} Data with {{DESeq2}}},
  author = {Love, Michael I and Huber, Wolfgang and Anders, Simon},
  date = {2014-12},
  journaltitle = {Genome Biology},
  shortjournal = {Genome Biol},
  volume = {15},
  number = {12},
  pages = {550},
  issn = {1474-760X},
  doi = {10.1186/s13059-014-0550-8},
  url = {http://genomebiology.biomedcentral.com/articles/10.1186/s13059-014-0550-8},
  urldate = {2024-09-28},
  langid = {english},
  file = {C:\Users\Mijn-PC\Zotero\storage\DILF6QZP\Love et al. - 2014 - Moderated estimation of fold change and dispersion.pdf}
}

@article{paganiniPlasmidECGplas2Optimized2024,
  title = {{{PlasmidEC}} and Gplas2: An Optimized Short-Read Approach to Predict and Reconstruct Antibiotic Resistance Plasmids in {{Escherichia}} Coli},
  shorttitle = {{{PlasmidEC}} and Gplas2},
  author = {Paganini, Julian A. and Kerkvliet, Jesse J. and Vader, Lisa and Plantinga, Nienke L. and Meneses, Rodrigo and Corander, Jukka and Willems, Rob J. L. and Arredondo-Alonso, Sergio and Schürch, Anita C.},
  date = {2024-02-20},
  journaltitle = {Microbial Genomics},
  volume = {10},
  number = {2},
  issn = {2057-5858},
  doi = {10.1099/mgen.0.001193},
  url = {https://www.microbiologyresearch.org/content/journal/mgen/10.1099/mgen.0.001193},
  urldate = {2024-09-28},
  abstract = {Accurate reconstruction of Escherichia coli antibiotic resistance gene (ARG) plasmids from Illumina sequencing data has proven to be a challenge with current bioinformatic tools. In this work, we present an improved method to reconstruct E. coli plasmids using short reads. We developed plasmidEC, an ensemble classifier that identifies plasmid-­derived contigs by combining the output of three different binary classification tools. We showed that plasmidEC is especially suited to classify contigs derived from ARG plasmids with a high recall of 0.941. Additionally, we optimized gplas, a graph-b­ ased tool that bins plasmid-p­ redicted contigs into distinct plasmid predictions. Gplas2 is more effective at recovering plasmids with large sequencing coverage variations and can be combined with the output of any binary classifier. The combination of plasmidEC with gplas2 showed a high completeness (median=0.818) and F1-­Score (median=0.812) when reconstructing ARG plasmids and exceeded the binning capacity of the reference-­based method MOB-s­ uite. In the absence of long-­read data, our method offers an excellent alternative to reconstruct ARG plasmids in E. coli.},
  langid = {english},
  file = {C:\Users\Mijn-PC\Zotero\storage\N2QMZ26B\Paganini et al. - 2024 - PlasmidEC and gplas2 an optimized short-read appr.pdf}
}

@online{skidmoreGriffithLab,
  title = {Griffith {{Lab}}},
  author = {Skidmore, Zachary},
  url = {http://www.genviz.org//course/},
  urldate = {2024-09-28},
  abstract = {Category index},
  langid = {british},
  organization = {Griffith Lab},
  file = {C:\Users\Mijn-PC\Zotero\storage\TVP7443L\course.html}
}

@online{skidmoreIntroductionCopyNumber03,
  title = {Introduction to Copy Number Spectrum Plots},
  author = {Skidmore, Zachary},
  date = {0003-06-01T00:00:00+00:00},
  url = {http://www.genviz.org//module-03-genvisr/0003/06/01/cnSpec_GenVisR/},
  urldate = {2024-09-28},
  abstract = {A common task in any bioinformatic analysis of next generation sequencing data is the the determination of copy number gains and losses. The cnSpec() function, short for “copy number spectrum”, from the GenVisR package is designed to provide a view of copy number calls for a cohort of cases. It is very similar to the cnFreq() function discussed in the previous section but displays per sample copy number changes in the form of a heatmap instead of summarizing calls. In this section we will use cnSpec() to explore the copy number calls from the same data set of her2 positive breast cancer samples used in the previous section. Loading data The data we will be working with was generated with the R package Copycat2. The output of this program consists of a file containing segmented copy number calls. You can find these files on http://genomedata.org/gen-viz-workshop/GenVisR/, go ahead and download all files with a “.cc2.tsv” extension. Once these files are downloaded we will need to read them into R and coerce them into a single data frame with column names “chromosome”, “start”, “end”, “segmean”, and “sample”. As a first step install and load the stringr package we’ll need this to make some of the string manipulation we’ll be doing easier. Once stringr is loaded run through the rest of the R code below the details of which can be found in the previous section. \# load extra libraries \# install.packages("stringr") library("stringr") \# get locations of all cn files files {$<$}- Sys.glob("\textasciitilde/Desktop/*cc2.tsv") \# create function to read in and format data a {$<$}- function(x)\{ \# read data and set column names data {$<$}- read.delim(x, header=FALSE) colnames(data) {$<$}- c("chromosome", "start", "end", "probes", "segmean") \# get the sample name from the file path sampleName {$<$}- str\_extract(x, "H\_OM.+cc2") sampleName {$<$}- gsub(".cc2", "", sampleName) data\$sample {$<$}- sampleName \# return the data return(data) \} \# run the anonymous function defined above cnData {$<$}- lapply(files, a) \# turn the list of data frames into a single data frame cnData {$<$}- do.call("rbind", cnData) Creating an initial plot Similar to cnFreq() in cnSpec() the only required parameters are a data frame with column names “chromosome”, “start”, “end”, “segmean”, “sample” and passing a reference assembly to the parameter genome=, one of “hg19”, “hg38”, “mm9”, “mm10”, or “rn5”. However cnSpec() is also more flexible and can accept custom coordinates with the parameter y, allowing it to plot any completed reference assembly. Fortunately for us when you installed the GenVisR package you also installed a data set called cytoGeno which contains the coordinates of cytogenetic bands for 5 reference assemblies. Let’s use this data set to pass in our genomic boundaries for “hg19” into the parameter y and construct an initial plot. \# construct genomic boundaries from cytoGeno genomeBoundaries {$<$}- aggregate(chromEnd \textasciitilde{} chrom, data=cytoGeno[cytoGeno\$genome=="hg19",], max) genomeBoundaries\$chromStart {$<$}- 0 colnames(genomeBoundaries) {$<$}- c("chromosome", "end", "start") \# create the plot cnSpec(cnData, y=genomeBoundaries) The genome parameter These plots are fairly straightforward, but it is helpful to know what the genome and y parameters actually do. As eluded to in the previous section only one of these is required, as they both do the same thing, define genome boundaries. This is done to ensure that if you only had data for one section of a chromosome the entire chromosome space is still plotted. To get a sense of what is actually happening let’s add a flank to genomeBoundaries and see what happens. You’ll see in the plot below that all the chromosomes plotted below now have a padding where no data is plotted. \# add a flank to the genomic coordinates genomeBoundaries\_2 {$<$}- genomeBoundaries genomeBoundaries\_2\$start {$<$}- genomeBoundaries\_2\$start - 1e8 genomeBoundaries\_2\$end {$<$}- genomeBoundaries\_2\$end + 1e8 \# create a plot cnSpec(cnData, y=genomeBoundaries\_2) Exercises There are times when a genome wide view of copy number changes is not necessary or desireable, for example we may want to view just chromosome 17 to look for ERBB2 amplifications as these are HER2+ breast cancer samples. We can achieve this by creating a custom genome to input into the y parameter. Try using what you know to only plot chromosome 17 and use geom\_vline() to highlight were ERBB2 is located. You can pass additional plot layers to cnSpec() with the param plotLayer. Your plot should look something like the one below. Get a hint! You'll need to create a custom genome that is only chromosome 17, you'll need to subset your input data as well. Answer cnSpec(cnData[cnData\$chromosome=="17",], y=genomeBoundaries[genomeBoundaries\$chromosome=="chr17",], plotLayer=geom\_vline(xintercept = 39709170, colour="seagreen4", size=1, linetype=2)) You could of course add whichever layers you wish to change any aspect of the plot’s we’ve been producing, however you will often find parameters within GenVisR functions in order to make the most common changes. Try reading the documentation for cnSpec() and create a version of the plot below. Get a hint! One of the parameters is "CN\_Loss\_colour" Answer cnSpec(cnData, y=genomeBoundaries, CN\_Loss\_colour="darkorchid4", CN\_Gain\_colour = "darkseagreen4")},
  langid = {british},
  organization = {Griffith Lab},
  file = {C:\Users\Mijn-PC\Zotero\storage\8DCYLH6E\cnSpec_GenVisR.html}
}

@online{SWBANDUdemyRoman,
  title = {[{{SW}}.{{BAND}}] [{{Udemy}}] {{Roman Dushkin}} - {{Основы}} Биоинформатики (2021)},
  url = {https://cloud.mail.ru/public/Kyp2/pw7XioVkA},
  urldate = {2024-09-28},
  abstract = {Скачивайте файлы из папки или сохраняйте к себе в Облако},
  organization = {Папка из Облака Mail},
  file = {C:\Users\Mijn-PC\Zotero\storage\4PY45UHE\pw7XioVkA.html}
}

@article{zhuHeavytailedPriorDistributions2019,
  title = {Heavy-Tailed Prior Distributions for Sequence Count Data: Removing the Noise and Preserving Large Differences},
  shorttitle = {Heavy-Tailed Prior Distributions for Sequence Count Data},
  author = {Zhu, Anqi and Ibrahim, Joseph G and Love, Michael I},
  editor = {Stegle, Oliver},
  date = {2019-06-01},
  journaltitle = {Bioinformatics},
  volume = {35},
  number = {12},
  pages = {2084--2092},
  issn = {1367-4803, 1367-4811},
  doi = {10.1093/bioinformatics/bty895},
  url = {https://academic.oup.com/bioinformatics/article/35/12/2084/5159452},
  urldate = {2024-09-28},
  abstract = {Abstract                            Motivation               In RNA-seq differential expression analysis, investigators aim to detect those genes with changes in expression level across conditions, despite technical and biological variability in the observations. A common task is to accurately estimate the effect size, often in terms of a logarithmic fold change (LFC).                                         Results               When the read counts are low or highly variable, the maximum likelihood estimates for the LFCs has high variance, leading to large estimates not representative of true differences, and poor ranking of genes by effect size. One approach is to introduce filtering thresholds and pseudocounts to exclude or moderate estimated LFCs. Filtering may result in a loss of genes from the analysis with true differences in expression, while pseudocounts provide a limited solution that must be adapted per dataset. Here, we propose the use of a heavy-tailed Cauchy prior distribution for effect sizes, which avoids the use of filter thresholds or pseudocounts. The proposed method, Approximate Posterior Estimation for generalized linear model, apeglm, has lower bias than previously proposed shrinkage estimators, while still reducing variance for those genes with little information for statistical inference.                                         Availability and implementation               The apeglm package is available as an R/Bioconductor package at https://bioconductor.org/packages/apeglm, and the methods can be called from within the DESeq2 software.                                         Supplementary information               Supplementary data are available at Bioinformatics online.},
  langid = {english},
  file = {C:\Users\Mijn-PC\Zotero\storage\JC3KZTGJ\Zhu et al. - 2019 - Heavy-tailed prior distributions for sequence coun.pdf}
}

@online{ZoteroBetterBibTeX,
  title = {Zotero and {{Better BibTeX}} | {{On The Line}}: {{How Schooling}}, {{Housing}}, and {{Civil Rights Shaped Hartford}} and Its {{Suburbs}}},
  url = {https://ontheline.trincoll.edu/zotero.html},
  urldate = {2024-11-07},
  file = {C:\Users\Mijn-PC\Zotero\storage\84NJEDBX\zotero.html}
}
