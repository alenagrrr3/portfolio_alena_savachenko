[["genvisr.html", "Chapter 10 GenVisR 10.1 Introduction to dataset 10.2 Implementation GenVisR", " Chapter 10 GenVisR 10.1 Introduction to dataset The scientists conducted a genome-wide association study and found mutations in specific regions of the genome that correlate with educational attainment. Found mutations are responsible for only two percent of the variation in the level of education and cognitive ability, but include “promising” for further research single-nucleotide polymorphisms (single-nucleotide polymorphisms, SNPs). Specifically, three independent mutations (rs9320913, rs11584700, rs4851266) are responsible for approximately 1 additional month of learning each.(rietveldGWAS126559Individuals2013?). Studies were performed on data from Utah residents with Northern and Western European ancestry ((rietveldGWAS126559Individuals2013?)). Daset comes form Supplementary Materials for GWAS of 126,559 Individuals Identifies Genetic Variants Associated with Educational Attainment https://www.science.org/doi/abs/10.1126/science.1235488 (Appendix) The normal functioning of each cell depends on thousands of proteins that need to be to be in the right place at the right time. Sometimes mutations in genes prevent one or one or more proteins from working properly. By making a change in a gene, the mutation thereby changes the instructions for synthesizing the protein so that the protein no longer functions properly or is not synthesized at all.The sequence of a gene in DNA can be altered in several ways. Mutations in genes have different effects on health and depend on which genes they occurred in and whether the function of these proteins is altered. This type of Missense mutation is caused by the replacement of one DNA base for another (e.g., replacing T for C, or G for A), resulting in the substitution of one amino acid for another in the protein encoded by the gene. Here is one example of missene mutation from the study by Flint and Munafò(rietveldGWAS126559Individuals2013?). 10.2 Implementation GenVisR Genomic Visualization and Interpretations Introduction to GenVisR GenVisR is a package to interpret and visualize data received from NGS sequencing.There are many tools available for the analysis and visualization of these data. In this module we will focus on 3 functions : waterfall, genCov, and cnSpec. For the last module another dataset is used. The dataset for the spectrum plot comes from the GDC data portal, https://portal.gdc.cancer.gov/analysis_page?app=Downloads, file with name MATZO_p_TCGAb40_SNP_1N_GenomeWideSNP_6_E09_667812.grch38.seg.v2.txt. Waterfall plots The waterfall() function from the GenVisR package displays mutation in a heatmap-like structure with rows and columns denotating genes and samples.The function creates a plot of the mutational landscape from original data. (WaterfallFunctionIntroduction?) First of all, we need to load the GenVisR library from bioconductor. We also need to load the mutation data. In the original dataset, only the gene name, mutation and position are present. We need to add some additional information from the Ensemble database, such as chromosome coordinates and gene annotation and to join this information to dataset. Install required libraries if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;GenVisR&quot;) library(GenVisR) library(data.table) library (tidyverse) library(biomaRt) library(tidyverse) Data preproccesing. First we save all gene names from article to the list. list_gen_names &lt;- c(&quot;AFF3&quot;,&quot;BTN1A1&quot;, &quot;H2AC6&quot;, &quot;HMGN4&quot;, &quot;MDM4&quot;, &quot;LRRN2&quot;, &quot;TANK&quot; ) list_ensemble &lt;- c(&quot;ENSG00000144218&quot;, &quot;ENSG00000124557&quot;,&quot;ENSG00000180573&quot;, &quot;ENSG00000182952&quot;, &quot;ENSG00000198625&quot;,&quot;ENSG00000170382&quot;, &quot;ENSG00000136560&quot;) Then we need to retrieve genomic coordinates and annotations for the further analyses. This is possible with biomaRt Bioconductor library ensembl &lt;- useMart(&quot;ensembl&quot;) ensembl &lt;- useDataset(&quot;hsapiens_gene_ensembl&quot;,mart=ensembl) object_results2 &lt;- getBM(attributes=c(&#39;ensembl_gene_id&#39;,&#39;chromosome_name&#39;, &#39;start_position&#39;, &#39;end_position&#39;,&#39;gene_biotype&#39;,&#39;hgnc_symbol&#39;), filters=&#39;hgnc_symbol&#39;, values=list_gen_names, mart=ensembl) Export Ensemble results to csv file. object_results2 write.csv(object_results2 ,&quot;data_raw/genViz/output_object_results_mart.csv&quot;) knitr::kable(object_results2, caption = &quot;The biomart results cotaining the gene coordinates&quot;) (#tab:biomart_results)The biomart results cotaining the gene coordinates ensembl_gene_id chromosome_name start_position end_position gene_biotype hgnc_symbol ENSG00000144218 2 99545419 100192428 protein_coding AFF3 ENSG00000292177 HSCHR6_1_CTG1 46483 56605 protein_coding BTN1A1 ENSG00000124557 6 26500303 26510425 protein_coding BTN1A1 ENSG00000180573 6 26124145 26139116 protein_coding H2AC6 ENSG00000292175 HSCHR6_1_CTG1 84546 93113 protein_coding HMGN4 ENSG00000182952 6 26538366 26546933 protein_coding HMGN4 ENSG00000170382 1 204617170 204685738 protein_coding LRRN2 ENSG00000198625 1 204516379 204558120 protein_coding MDM4 ENSG00000136560 2 161136908 161236230 protein_coding TANK biomart_export &lt;-read.csv(&quot;output/genViz/output_object_results_mart.csv&quot;) Join dataset export from biomart with list of genes/mutations. biomart_export &lt;- biomart_export[,-1] head( biomart_export) ## ensembl_gene_id chromosome_name start_position end_position gene_biotype ## 1 ENSG00000144218 2 99545419 100192428 protein_coding ## 2 ENSG00000292177 HSCHR6_1_CTG1 46483 56605 protein_coding ## 3 ENSG00000124557 6 26500303 26510425 protein_coding ## 4 ENSG00000180573 6 26124145 26139116 protein_coding ## 5 ENSG00000292175 HSCHR6_1_CTG1 84546 93113 protein_coding ## 6 ENSG00000182952 6 26538366 26546933 protein_coding ## hgnc_symbol ## 1 AFF3 ## 2 BTN1A1 ## 3 BTN1A1 ## 4 H2AC6 ## 5 HMGN4 ## 6 HMGN4 data_set_appendix&lt;-read.csv2(&quot;output/genViz/output_BTN1A2.csv&quot;) Make column names fit to join the ensemble dataset names(data_set_appendix)[names(data_set_appendix) == &#39;Hugo_Symbol&#39;] &lt;- &#39;hgnc_symbol&#39; names(data_set_appendix)[names(data_set_appendix) == &#39;X&#39;] &lt;- &#39;sample&#39; full_join &lt;- merge(data_set_appendix,biomart_export, by =&quot;hgnc_symbol&quot;) head(full_join) ## hgnc_symbol sample Variant_Classification Position ensembl_gene_id ## 1 AFF3 18 3UTR 99545644 ENSG00000144218 ## 2 AFF3 19 Missense_Mutation 99545817 ENSG00000144218 ## 3 AFF3 20 Missense_Mutation 99545812 ENSG00000144218 ## 4 AFF3 17 Missense_Mutation 99545531 ENSG00000144218 ## 5 BTN1A1 3 Missense_Mutation 26505362 ENSG00000292177 ## 6 BTN1A1 3 Missense_Mutation 26505362 ENSG00000124557 ## chromosome_name start_position end_position gene_biotype ## 1 2 99545419 100192428 protein_coding ## 2 2 99545419 100192428 protein_coding ## 3 2 99545419 100192428 protein_coding ## 4 2 99545419 100192428 protein_coding ## 5 HSCHR6_1_CTG1 46483 56605 protein_coding ## 6 6 26500303 26510425 protein_coding SNP mutation in the genome, such as single nucleotide variants, insertions, or deletions, play a significant role in the development of genetic diseases. Identifying and summarizing these variants is frequently the initial stage in forming hypotheses about how these events contribute to the development and advancement of diseases. The purpose of the waterfall function is to effectively consolidate small variant (SNVs/indels) data at a cohort level. It is usefull for gaining a comprehensive understanding of the types of variations seen in a group. Additionally, waterfall plots provide insight into the burden of mutations, genes that are frequently mutated, the mutual exclusivity or co-occurrence of genes, and the correlation between variants and clinical information. (WaterfallFunctionIntroductiona?) waterfall: function implementation on the chosen dataset myHierarchy &lt;- data.table(&quot;mutation&quot;=c(&quot;Missense_Mutation&quot;, &quot;Silent&quot;, &quot;3’UTR&quot;, &quot;DEL&quot;), color=c(&quot;#001ca4&quot;, &quot;#A8F5C2&quot;, &quot;#D69C4E&quot;, &quot;#F4CCD0&quot; ) ) colnames(full_join) ## [1] &quot;hgnc_symbol&quot; &quot;sample&quot; &quot;Variant_Classification&quot; ## [4] &quot;Position&quot; &quot;ensembl_gene_id&quot; &quot;chromosome_name&quot; ## [7] &quot;start_position&quot; &quot;end_position&quot; &quot;gene_biotype&quot; names(full_join)[names(full_join) == &#39;hgnc_symbol&#39;] &lt;- &#39;gene&#39; names(full_join)[names(full_join) == &#39;Variant_Classification&#39;] &lt;- &#39;mutation&#39; names(full_join)[names(full_join) == &#39;X&#39;] &lt;- &#39;sample&#39; full_join &lt;- full_join %&gt;% janitor :: clean_names() plotGenes=c(&quot;PIK3CA&quot;, &quot;TP53&quot;, &quot;USH2A&quot;, &quot;MLL3&quot;, &quot;BRCA1&quot;) plotData2 &lt;- Waterfall(full_join, mutationHierarchy = myHierarchy) drawPlot(plotData2) cnSpec library(GenVisR) library(tidyverse) file_ngs_part1 &lt;- &quot;data_raw/genViz/MATZO_p_TCGAb40_SNP_1N_GenomeWideSNP_6_E09_667812.grch38.seg.v1.txt&quot; file_ngs_part2 &lt;- &quot;data_raw/genViz/MATZO_p_TCGAb40_SNP_1N_GenomeWideSNP_6_E09_667812.grch38.seg.v2.txt&quot; ngs_v1 &lt;- readr::read_delim(file_ngs_part1, delim = &quot;\\t&quot;) ## Rows: 7464 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;\\t&quot; ## chr (2): GDC_Aliquot, Chromosome ## dbl (4): Start, End, Num_Probes, Segment_Mean ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ngs_v2 &lt;- readr::read_delim(file_ngs_part2, delim = &quot;\\t&quot;) ## Rows: 7464 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;\\t&quot; ## chr (2): GDC_Aliquot, Chromosome ## dbl (4): Start, End, Num_Probes, Segment_Mean ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ngsv1.2 &lt;- rbind(ngs_v1,ngs_v2) head(ngsv1.2) ## # A tibble: 6 × 6 ## GDC_Aliquot Chromosome Start End Num_Probes Segment_Mean ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3573fb47-be73-4d7c-a9c9-b0ba… 1 6.29e4 9.86e4 13 0.632 ## 2 3573fb47-be73-4d7c-a9c9-b0ba… 1 2.59e5 7.93e5 13 0.152 ## 3 3573fb47-be73-4d7c-a9c9-b0ba… 1 8.05e5 3.30e6 714 0.338 ## 4 3573fb47-be73-4d7c-a9c9-b0ba… 1 3.30e6 5.05e6 1321 0.0421 ## 5 3573fb47-be73-4d7c-a9c9-b0ba… 1 5.05e6 5.07e6 12 0.664 ## 6 3573fb47-be73-4d7c-a9c9-b0ba… 1 5.08e6 5.19e6 87 0.0681 colnames(ngsv1.2) &lt;- c(&quot;sample&quot;, &quot;chromosome&quot;, &quot;start&quot;, &quot;end&quot;, &quot;probes&quot;, &quot;segmean&quot;) ngsv1.2 &lt;- mutate(ngsv1.2, sample=str_sub(sample, start=32, end=36)) genomeBoundaries &lt;- aggregate(chromEnd ~ chrom, data=cytoGeno[cytoGeno$genome==&quot;hg38&quot;,], max) genomeBoundaries$chromStart &lt;- 0 colnames(genomeBoundaries) &lt;- c(&quot;chromosome&quot;, &quot;end&quot;, &quot;start&quot;) cnSpec(ngsv1.2, genome=&quot;hg38&quot;, CN_Loss_colour = &quot;#add8e6&quot;, CN_Gain_colour = &quot;#A30000&quot;, CNscale=&quot;relative&quot;, y=genomeBoundaries ) Gen cov library(TxDb.Hsapiens.UCSC.hg19.knownGene) ## Loading required package: GenomicFeatures ## Loading required package: BiocGenerics ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:lubridate&#39;: ## ## intersect, setdiff, union ## The following objects are masked from &#39;package:dplyr&#39;: ## ## combine, intersect, setdiff, union ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, aperm, append, as.data.frame, basename, cbind, ## colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ## get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ## match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ## Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ## table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ## Loading required package: stats4 ## ## Attaching package: &#39;S4Vectors&#39; ## The following objects are masked from &#39;package:lubridate&#39;: ## ## second, second&lt;- ## The following objects are masked from &#39;package:dplyr&#39;: ## ## first, rename ## The following object is masked from &#39;package:tidyr&#39;: ## ## expand ## The following objects are masked from &#39;package:data.table&#39;: ## ## first, second ## The following object is masked from &#39;package:utils&#39;: ## ## findMatches ## The following objects are masked from &#39;package:base&#39;: ## ## expand.grid, I, unname ## Loading required package: IRanges ## ## Attaching package: &#39;IRanges&#39; ## The following object is masked from &#39;package:lubridate&#39;: ## ## %within% ## The following objects are masked from &#39;package:dplyr&#39;: ## ## collapse, desc, slice ## The following object is masked from &#39;package:purrr&#39;: ## ## reduce ## The following object is masked from &#39;package:data.table&#39;: ## ## shift ## The following object is masked from &#39;package:grDevices&#39;: ## ## windows ## Loading required package: GenomeInfoDb ## Loading required package: GenomicRanges ## Loading required package: AnnotationDbi ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## ## Attaching package: &#39;AnnotationDbi&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene library(BSgenome.Hsapiens.UCSC.hg19) ## Loading required package: BSgenome ## Loading required package: Biostrings ## Loading required package: XVector ## ## Attaching package: &#39;XVector&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## compact ## ## Attaching package: &#39;Biostrings&#39; ## The following object is masked from &#39;package:base&#39;: ## ## strsplit ## Loading required package: BiocIO ## Loading required package: rtracklayer ## ## Attaching package: &#39;rtracklayer&#39; ## The following object is masked from &#39;package:BiocIO&#39;: ## ## FileForFormat genome &lt;- BSgenome.Hsapiens.UCSC.hg19 library(BSgenome.Hsapiens.UCSC.hg19) library(TxDb.Hsapiens.UCSC.hg19.knownGene) url &lt;- &quot;data_raw/genViz/BTN1A1_cov_chr6.V1.txt&quot; covData &lt;- read.csv(url, sep=&quot;\\t&quot;, header=T) colnames(covData) &lt;- c(&quot;chromosome&quot;, &quot;start&quot;, &quot;end&quot;, &quot;BTN1A1&quot;, &quot;BTN2A1&quot;) # create a function to split the data frame into lists of data frames samples &lt;- c(&quot;BTN1A1&quot;, &quot;BTN2A1&quot;) a &lt;- function(x, y){ col_names &lt;- c(&quot;chromosome&quot;, &quot;end&quot;, x) y &lt;- y[,col_names] colnames(y) &lt;- c(&quot;chromosome&quot;, &quot;end&quot;, &quot;cov&quot;) return(y) } covData &lt;- lapply(samples, a, covData) names(covData) &lt;- samples genomeObject &lt;-BSgenome.Hsapiens.UCSC.hg19 TxDbObject &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene chromosome &lt;- as.character(unique(covData[[1]]$chromosome)) start &lt;- as.numeric(min(covData[[1]]$end)) end &lt;- as.numeric(max(covData[[1]]$end)) grObject &lt;- GRanges(seqnames=c(&quot;chr6&quot;), ranges=IRanges(start=start, end=end)) genCov(x=covData, txdb=TxDbObject, gr=grObject, genome=genomeObject, cov_plotType=&quot;line&quot;, label_txtSize = 5) ## Obtaining CDS Coordinates ## &#39;select()&#39; returned 1:many mapping between keys and columns ## Obtaining UTR Coordinates ## &#39;select()&#39; returned 1:many mapping between keys and columns ## Calculating transform ## Mapping coverage data onto transformed gene-space ## NULL "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
